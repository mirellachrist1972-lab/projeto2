# Projeto de MVP para an√°lise de ferramentas e solu√ß√µes em nuvem
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="Distribui√ß√£o do PROGEFE",
    page_icon="üìä",
    layout="wide"
)

# Fun√ß√£o para carregar dados com valida√ß√£o
@st.cache_data
def carregar_dados(file_name):
    """Carrega um arquivo CSV e retorna um DataFrame pandas.
    
    Args:
        file_name (str): Caminho do arquivo CSV.
    
    Returns:
        pd.DataFrame: DataFrame com os dados carregados.
    """
    try:
        df = pd.read_csv(file_name)
        required_columns = ["nome_esc", "mun", "val"]
        if not all(col in df.columns for col in required_columns):
            st.error("O arquivo CSV n√£o cont√©m todas as colunas necess√°rias: 'nome_esc', 'mun', 'val'.")
            st.stop()
        # Renomear colunas para maior clareza
        df = df.rename(columns={
            "nome_esc": "nome_escola",
            "mun": "municipio",
            "val": "valor_arrecadado"
        })
        return df
    except FileNotFoundError:
        st.error(f"Arquivo '{file_name}' n√£o encontrado.")
        st.stop()
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo: {e}")
        st.stop()

# Fun√ß√£o para plotar valor por escola
def plot_valor_por_escola(df, top_n=20):
    """Gera um gr√°fico de barras com os valores arrecadados por escola."""
    if df.empty:
        st.warning("Nenhum dado dispon√≠vel para o gr√°fico de escolas.")
        return
    fig, ax = plt.subplots(figsize=(12, 7))
    sns.barplot(
        x="nome_escola",
        y="valor_arrecadado",
        data=df.sort_values(by="valor_arrecadado", ascending=False).head(top_n),
        ax=ax,
        palette="viridis"
    )
    ax.set_xlabel("Nome da Escola")
    ax.set_ylabel("Valor Arrecadado (R$)")
    ax.set_title(f"Top {top_n} Escolas por Valor Arrecadado")
    plt.xticks(rotation=90, fontsize=8)
    plt.tight_layout()
    st.pyplot(fig)

# Fun√ß√£o para plotar valor por munic√≠pio
def plot_valor_por_municipio(df):
    """Gera um gr√°fico de barras com os valores arrecadados por munic√≠pio."""
    if df.empty:
        st.warning("Nenhum dado dispon√≠vel para o gr√°fico de munic√≠pios.")
        return
    df_agg = df.groupby("municipio")["valor_arrecadado"].sum().reset_index()
    df_agg = df_agg.sort_values(by="valor_arrecadado", ascending=False)
    fig, ax = plt.subplots(figsize=(12, 7))
    sns.barplot(
        x="municipio",
        y="valor_arrecadado",
        data=df_agg,
        ax=ax,
        palette="magma"
    )
    ax.set_xlabel("Munic√≠pio")
    ax.set_ylabel("Valor Total Arrecadado (R$)")
    ax.set_title("Valor Total Arrecadado por Munic√≠pio (R$)")
    plt.xticks(rotation=90, fontsize=8)
    plt.tight_layout()
    st.pyplot(fig)

# Fun√ß√£o para exibir estat√≠sticas descritivas
def exibir_estatisticas(df):
    """Exibe estat√≠sticas descritivas formatadas."""
    if df.empty:
        st.warning("Nenhum dado dispon√≠vel para estat√≠sticas.")
        return
    stats = df[["valor_arrecadado"]].describe().reset_index().rename(columns={"index": "Estat√≠stica"})
    st.table(stats)

# Carregar dataset
df = carregar_dados("dados_escolas.csv")

# √çndice interativo com st.radio
st.sidebar.subheader("Navega√ß√£o")
sections = [
    "Iniciando meu primeiro app",
    "Tema do Projeto",
    "Estrutura do Aplicativo",
    "Bases de Dados",
    "Pr√≥ximas Etapas",
    "An√°lise de Arrecada√ß√£o por Escola e Munic√≠pio",
    "Vis√£o Geral dos Dados",
    "Valor Arrecadado por Escola",
    "Valor Arrecadado por Munic√≠pio",
    "Estat√≠sticas Descritivas"
]
selected_section = st.sidebar.radio("Ir para a se√ß√£o:", sections, index=0)# Configura√ß√£o da sidebar com filtros e √≠ndice
st.sidebar.subheader("Filtros")
municipios_unicos = df["municipio"].unique().tolist()
regiao_selecionada = st.sidebar.multiselect(
    "Selecionar Munic√≠pios",
    options=municipios_unicos,
    default=municipios_unicos
)

# Bot√£o para selecionar todos
if st.sidebar.button("Selecionar Todos os Munic√≠pios"):
    regiao_selecionada = municipios_unicos

# Aplicar filtros
df_filtrado = df[df["municipio"].isin(regiao_selecionada)]


# Exibir conte√∫do com base na se√ß√£o selecionada
st.markdown("---")
if selected_section == "Iniciando meu primeiro app":
    st.title("üöÄ Iniciando meu primeiro app")
    st.write('**Distribui√ß√£o do PROGEFE nas escolas estaduais do ES em 2024.**')
    st.text('')
    st.markdown('üìå **Aluna: Mirella Carla Mendes Christ**')
  
elif selected_section == "Tema do Projeto":
    st.header("Tema do Projeto")
    st.write("Distribui√ß√£o dos recursos financeiros distribu√≠dos atrav√©s do PROGEFE nas escolas estaduais do ES em 2024, com dashboards regionais e por escolas e superintend√™ncias.")
    st.write("Dados fict√≠cios")

elif selected_section == "Estrutura do Aplicativo":
    st.header("Estrutura do Aplicativo")
    st.write("O aplicativo ser√° organizado nas seguintes se√ß√µes:")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.subheader("üìà Dashboard por munic√≠pio")
        st.write("Visualiza√ß√£o de valores em R$ por regi√£o geogr√°fica")
    with col2:
        st.subheader("üè´ Dashboard por Escola")
        st.write("An√°lise detalhada de valores em R$ por unidade escolar")

elif selected_section == "Bases de Dados":
    st.header("Bases de Dados")
    st.write("Fontes de dados que ser√£o utilizadas no projeto:")
    st.markdown("""
    - Valores de distribui√ß√£o dos recursos do sistema e-gest√£o
    - Registros de Institui√ß√µes de Ensino
    - Dados dos valores por munic√≠pio
    """)

elif selected_section == "Pr√≥ximas Etapas":
    st.header("Pr√≥ximas Etapas")
    st.write("Para vers√µes futuras, planejamos implementar:")
    st.markdown("""
    1. Gr√°ficos interativos com zoom e tooltips
    2. Integra√ß√£o com APIs para dados em tempo real
    3. Exporta√ß√£o de relat√≥rios em PDF
    4. Filtros adicionais (por escola, valor m√≠nimo/m√°ximo)
    5. Visualiza√ß√µes geogr√°ficas (mapas)
    """)

elif selected_section == "An√°lise de Arrecada√ß√£o por Escola e Munic√≠pio":
    st.title("An√°lise de Arrecada√ß√£o por Escola e Munic√≠pio")
    st.subheader("Dados Originais")
    st.dataframe(df, height=400)

elif selected_section == "Vis√£o Geral dos Dados":
    st.subheader("Vis√£o Geral dos Dados")
    st.dataframe(df_filtrado.head(), height=400)
    # Bot√£o de download
    csv = df_filtrado.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar Dados Filtrados (CSV)",
        data=csv,
        file_name="dados_filtrados_progefe.csv",
        mime="text/csv"
    )

elif selected_section == "Valor Arrecadado por Escola":
    st.subheader("Valor Arrecadado por Escola")
    plot_valor_por_escola(df_filtrado)

elif selected_section == "Valor Arrecadado por Munic√≠pio":
    st.subheader("Valor Arrecadado por Munic√≠pio")
    plot_valor_por_municipio(df_filtrado)

elif selected_section == "Estat√≠sticas Descritivas":
    st.subheader("Estat√≠sticas Descritivas")
    exibir_estatisticas(df_filtrado)